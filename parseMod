#!/usr/bin/env python

# Parse module load log files created and count what modules
# were called via parsing lines with 'module-hpc'. 
# Arguments:  list of files to process, if empty use all /var/log/module-hpc* files

import sys
import os
from collections import defaultdict
from getModInfo import ModInfo
from datetime import datetime
import numpy as np
import matplotlib.pyplot as plt

class  FileParser:
    def __init__(self, args):
        self.prog = os.path.basename(args[0])
        self.args = args[1:]          # command line arguments
        self.basedir = "/var/log/"    # default directory for log files
        self.files = []               # file names to parse
        self.output = []              # output gtext
        self.filelogname = "module-hpc"
        self.modlist = []             # installed modules names list
        # we renamed some modules or we dont install some on all nodes
        # key - name to map, val - name to map to
        self.mapping = {"fftw/3.3.8":"fftw/3.3.8/gcc.4.8.5",
             "pytorch-cuda/1.5.1":"pytorch/1.5.1",
             "gromacs/2020.4/gcc.8.4.0-cuda.10.1.243":"gromacs/2020.4/gcc.8.4.0-cuda.10.1.243",
             "gromacs/2020.4/gcc.8.4.0-cuda.10.1.243.openmpi.4.0.3":"gromacs/2020.4/gcc.8.4.0-cuda.10.1.243.openmpi.4.0.3",
             "gromacs/2020.4/gcc.8.4.0-cuda.10.1.243.openmpi.4.0.3.plumed.2.6.1":"gromacs/2020.4/gcc.8.4.0-cuda.10.1.243.openmpi.4.0.3.plumed.2.6.1",
             "plumed/2.6.1/gcc.8.4.0-openmpi.4.0.3":"plumed/2.6.1/gcc.8.4.0-openmpi.4.0.3",
             "rustc/1.50.0/gcc.8.4.0":"rustc/1.50.0"
             }

        self.parseArgs()

        if self.files == []:
            str = "\nThere are no module log files to parse.\n" \
                + "Files must be provided on a command line \n" \
                + "if defualt files /var/log/%s* don't exist." % self.filelogname
            print (str)
            sys.exit(0)

        self.runtime = datetime.now().strftime("%Y%m%d")
        self.output.append("Processed files on %s:\n" % self.runtime)
        for f in self.files:
            self.output.append("    %s\n" % f)

    def exitHelp(self):
        helpstr = "NAME\n        %s - parse log files and count how often modules were loaded\n" % self.prog \
                + "\nSYNOPSIS\n        %s [OPTION] [FILE]...\n" % self.prog \
                + "\nDESCRIPTION\n        Parse FILEs provided on a command line and find how many times modules were loaded.\n" \
                + "        If none provided, will parse /var/log/module-hpc* files. The output contains per each used\n" \
                + "        module a module name and a count of times loaded and a list of modules that were not loaded.\n\n" \
                + "        -h, --h, --help, help\n              Print usage info.\n" 
        print (helpstr)
        sys.exit(0)

    def exitError(self):
        print (self.errmsg)
        sys.exit(1)

    def parseArgs(self):
        if self.args == []:
            self.getDefaultFiles()
        elif self.args[0] in ["-h","--h","help","-help","--help"]:
            self.exitHelp()
        else:
            for i in self.args:
                if os.path.isfile(i):
                    self.files.append(i)

    def getDefaultFiles(self):
            try:
                all = os.listdir(self.basedir)
            except OSError as err:
                self.errmsg = "Error code %d: %s: '%s'" % (err.errno, err.strerror, err.filename)
                self.exitError()

            for i in all:
                if i.find(self.filelogname) == 0:
                    self.files.append(self.basedir + i)

    def countTimesLoaded(self):
        self.maxl = 0 
        oldnames = self.mapping.keys()

        # create dictionary with key:value as modulename:number_times_called
        self.count = defaultdict(int)
        self.usermod = defaultdict(int)
        for log in self.files:
            print ("Processing file: ", log)
            f =  open(log) 
            for i, line in enumerate(f):
                module = line.split()[-1]
                if module in self.modlist:
                    self.count[module] += 1
                elif module in oldnames:
                    self.count[self.mapping[module]] += 1
                else:
                    self.usermod[module] += 1
                ll = len(module)
                if ll > self.maxl:
                    self.maxl = ll

        self.countTotal = len(self.count)

        # NOTE to get only entries with more than 1 count
        # self.count = {k: v for k, v in self.count.items() if v > 1}

    def getUsedModules(self):
        self.countTimesLoaded()
        self.used = sorted(self.count.items(), key=lambda x: x[1], reverse=True)

    def getUnusedModules(self):
        blist = set(sorted(self.count.keys()))
        self.unused = [i for i in self.modlist if i not in blist]

    def writeOutput(self):
        fname = "out-parsemod-%s" % self.runtime
        self.printUsedModules()
        self.printUnusedModules()
        self.printUserModules()
        f = open(fname, "w")
        f.writelines(self.output)
        f.close()

    def printUsedModules(self):
        self.getUsedModules()
        self.output.append ("========== Total unique used modules: %d ==========\n" % self.countTotal)
        for i in self.used:
            self.output.append('{sw:{width}s} {num:12d}\n'.format(sw=i[0], num=i[1], width=self.maxl))

    def printUnusedModules(self):
        self.getUnusedModules()
        self.output.append("========== Total unique unused modules: %d ==========\n" % len(self.unused))
        for i in self.unused: 
            self.output.append("%s\n" % i)

    def printUserModules(self):
        self.output.append("========== Total unique user or removed modules: %d ==========\n" % len(self.usermod))
        user = sorted(self.usermod.items(), key=lambda x: x[1], reverse=True)
        for i in user: 
            self.output.append('{sw:{width}s} {num:12d}\n'.format(sw=i[0], num=i[1], width=self.maxl))

    def usageGraph(self):
        name = "dot-graphs/usageStats"

        # get counts for used modules
        data = []
        for i in self.used:
            data.append(i[1])

        # add unused counts initialized to 0.1 so that can use log10
        data += [0.1] * len(self.unused)

        x = data
        ylog = np.log10(data)

        bins=[-1,0,1,2,3,4,5,6]
        plt.figure(1)
        ans=plt.hist(ylog, bins=bins,rwidth=0.8, align='left' )
        cols = ['gainsboro', 'LightSteelBlue', 'LightSkyblue', 'LightBlue', 'Gold', 'Orange','OrangeRed']
        y = ans[0]
        x = ans[1][:-1]
        labels = ['no usage', "1(s)", "10(s)", "100(s)", "1,000(s)", "10,000(s)", "100,000(s)"]
        plt.figure(2)
        p = plt.pie(y, pctdistance=0.7,autopct=lambda pct: self.func(pct, y),labeldistance=1.05, startangle=0,labels=labels,colors=cols)
        plt.axis('equal')  
        plt.rcParams.update({"figure.facecolor": (1.0, 1.0, 1.0, 1.0), "axes.facecolor":(1.0, 1.0, 1.0, 0.95)})
        plt.title("Usage for %d modules " % len(data))
        plt.show()
        plt.savefig("%s.png" % name)


    def func(self, pct, allvals):
        absolute = int(round(pct/100. * np.sum(allvals)))
        return "{:.2f}%\n({:d})".format(pct, absolute)

    def run(self):
        self.modinfo = ModInfo()
        self.modinfo.runCheck()
        self.modlist = sorted(self.modinfo.getModNameList())
        self.writeOutput()
        self.usageGraph()
        
##### Run from a command line #####
if __name__ == "__main__":
    app = FileParser(sys.argv)
    app.run()

