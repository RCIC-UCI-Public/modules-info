#!/usr/bin/env python

# Parse files created from /var/log/messages files and count what modules
# were called per parsing lines with 'module-hpc'. 
# Arguments:  list of files to process, if empty use all /var/log/messages* files
# NOTE: using unprocessed /var/log/messages files is slow, extract needed lines by 
# running 'xmodl' script on /var/log/messages first then use processsed files.

import sys
import os
from collections import defaultdict
from getModInfo import ModInfo

class  FileParser:
    def __init__(self, args):
        self.prog = os.path.basename(args[0])
        self.args = args[1:]          # command line arguments
        self.basedir = "/var/log/"    # default directory for system messages files
        self.files = []               # file names to parse

        self.parseArgs()

    def exitHelp(self):
        helpstr = "NAME\n        %s - parse log files and count how often modules were loaded\n" % self.prog \
                + "\nSYNOPSIS\n        %s [OPTION] [FILE]...\n" % self.prog \
                + "\nDESCRIPTION\n        Parse FILEs provided on a command line and find how many times modules were loaded.\n" \
                + "        If none provided, will parse /var/log/messages* files. The output contains per each used\n" \
                + "        module a module name and a count of times loaded and a list of modules that were not loaded.\n\n" \
                + "        NOTE: using unprocessed /var/log/messages files can be slow. Process them first\n" \
                + "        with 'xmodl' and then run this program on processsed files.\n\n" \
                + "        -h, --h, --help, help\n              Print above usage info.\n" 
        print (helpstr)
        sys.exit(0)

    def exitError(self):
        print (self.errmsg)
        sys.exit(1)

    def parseArgs(self):
        if self.args == []:
            self.getDefaultFiles()
        elif self.args[0] in ["-h","--h","help","-help","--help"]:
            self.exitHelp()
        else:
            for i in self.args:
                if os.path.isfile(i):
                    self.files.append(i)

    def getDefaultFiles(self):
            try:
                all = os.listdir(self.basedir)
            except OSError as err:
                self.errmsg = "Error code %d: %s: '%s'" % (err.errno, err.strerror, err.filename)
                self.exitError()

            for i in all:
                if i.find("messages") == 0:
                    self.files.append(self.basedir + i)

    def countTimesLoaded(self):
        self.maxl = 0 
        # create dictionary with key:value as modulename:number_times_called
        self.count = defaultdict(int)
        for log in self.files:
            f =  open(log) 
            for i, line in enumerate(f):
                if line.find("module-hpc") < 0: continue
                module = line.split()[-1]
                self.count[module] += 1
                ll = len(module)
                if ll > self.maxl:
                    self.maxl = ll

        self.countTotal = len(self.count)

        # NOTE to get only entries with more than 1 count
        # self.count = {k: v for k, v in self.count.items() if v > 1}

    def getUsedModules(self):
        self.countTimesLoaded()
        self.used = sorted(self.count.items(), key=lambda x: x[1], reverse=True)

    def getUnusedModules(self):
        self.modinfo = ModInfo()
        alist = sorted(self.modinfo.getModNameList())
        blist = set(sorted(self.count.keys()))
        self.unused = [i for i in alist if i not in blist]

    def printUsedModules(self):
        self.getUsedModules()
        print ("\n===== Total unique used modules: %d" % self.countTotal)
        for i in self.used:
            print ('{sw:{width}s} {num:12d}'.format(sw=i[0], num=i[1], width=self.maxl))

    def printUnusedModules(self):
        self.getUnusedModules()
        print ("\n===== Total unique unused modules: %d" % len(self.unused))
        for i in self.unused: 
            print (i)

    def run(self):
        self.printUsedModules()
        self.printUnusedModules()

##### Run from a command line #####
if __name__ == "__main__":
    app = FileParser(sys.argv)
    app.run()

